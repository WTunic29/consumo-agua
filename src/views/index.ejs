<!DOCTYPE html>
<html lang="es" data-bs-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Consumo de Agua</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #1e40af;
            --background-color: #f8fafc;
            --card-background: #ffffff;
            --text-color: #1e293b;
            --border-color: #e2e8f0;
            --chart-grid-color: rgba(226, 232, 240, 0.5);
        }

        [data-bs-theme="dark"] {
            --primary-color: #60a5fa;
            --secondary-color: #3b82f6;
            --background-color: #0f172a;
            --card-background: #1e293b;
            --text-color: #e2e8f0;
            --border-color: #334155;
            --chart-grid-color: rgba(51, 65, 85, 0.5);
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .navbar {
            background-color: var(--card-background);
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: background-color 0.3s ease;
        }

        .chart-container {
            height: 400px;
            margin-bottom: 20px;
        }

        #mapaConsumo {
            height: 400px;
            width: 100%;
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1);
        }

        .card {
            background-color: var(--card-background);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1);
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .card:hover {
            transform: translateY(-2px);
        }

        .card-title {
            color: var(--text-color);
            font-weight: 600;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .table {
            margin-bottom: 0;
        }

        .table th {
            background-color: var(--background-color);
            border-bottom: 2px solid var(--border-color);
            font-weight: 600;
        }

        .table td {
            border-color: var(--border-color);
            color: var(--text-color);
            vertical-align: middle;
        }

        .table-responsive {
            max-height: 400px;
            overflow-y: auto;
            scrollbar-width: thin;
        }

        .table-responsive::-webkit-scrollbar {
            width: 6px;
        }

        .table-responsive::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .table-responsive::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 3px;
        }

        .stats-card {
            padding: 1.5rem;
            text-align: center;
        }

        .stats-value {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .stats-label {
            font-size: 0.875rem;
            color: var(--text-color);
            opacity: 0.7;
        }

        @media (max-width: 768px) {
            .card {
                margin-bottom: 1rem;
            }
        }

        .trend-indicator {
            font-size: 0.875rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }
        .trend-up {
            background-color: #dcfce7;
            color: #166534;
        }
        .trend-down {
            background-color: #fee2e2;
            color: #991b1b;
        }
        .trend-neutral {
            background-color: #f3f4f6;
            color: #374151;
        }
        .comparison-chart {
            height: 300px;
        }
        .projection-chart {
            height: 300px;
        }
        .variation-card {
            transition: all 0.3s ease;
        }
        .variation-card:hover {
            transform: translateY(-5px);
        }

        /* Estilos para el botón de modo oscuro */
        .theme-toggle {
            background: none;
            border: none;
            padding: 8px;
            cursor: pointer;
            font-size: 1.2rem;
            color: var(--text-color);
            transition: transform 0.2s ease;
        }

        .theme-toggle:hover {
            transform: scale(1.1);
        }

        [data-bs-theme="dark"] .theme-toggle .bi-moon-fill {
            display: none;
        }

        [data-bs-theme="dark"] .theme-toggle .bi-sun-fill {
            display: inline-block;
        }

        [data-bs-theme="light"] .theme-toggle .bi-moon-fill {
            display: inline-block;
        }

        [data-bs-theme="light"] .theme-toggle .bi-sun-fill {
            display: none;
        }

        /* Ajustes para el modo oscuro en los gráficos */
        [data-bs-theme="dark"] .trend-up {
            background-color: rgba(22, 101, 52, 0.2);
            color: #86efac;
        }

        [data-bs-theme="dark"] .trend-down {
            background-color: rgba(153, 27, 27, 0.2);
            color: #fca5a5;
        }

        [data-bs-theme="dark"] .trend-neutral {
            background-color: rgba(55, 65, 81, 0.2);
            color: #9ca3af;
        }

        .legend {
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
        }
        .legend h4 {
            margin: 0 0 5px;
            color: #333;
        }
        .legend div {
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <!-- Barra de navegación -->
    <nav class="navbar navbar-expand-lg" style="background-color: var(--card-background);">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">Sistema de Consumo de Agua</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
                </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Inicio</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#facturasContainer">Mis Facturas</a>
                    </li>
                </ul>
                <div class="d-flex align-items-center gap-2">
                    <div class="d-flex align-items-center" id="userSession" style="display: none;">
                        <span class="me-3">Bienvenido, <span id="userName"></span></span>
                        <button class="btn btn-outline-danger" onclick="cerrarSesion()">Cerrar Sesión</button>
                    </div>
                    <div class="d-flex align-items-center" id="authLinks" style="display: none;">
                        <a href="/auth/login" class="btn btn-outline-primary me-2">Iniciar Sesión</a>
                        <a href="/auth/registro" class="btn btn-primary">Registrarse</a>
                    </div>
                    <button id="themeToggle" class="theme-toggle ms-2" title="Cambiar modo claro/oscuro">
                        <i class="bi bi-moon-fill"></i>
                        <i class="bi bi-sun-fill"></i>
                </button>
                </div>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Tarjetas de estadísticas -->
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card stats-card">
                    <div class="stats-value" id="promedioBogota">-</div>
                    <div class="stats-label">Promedio Bogotá (m³/mes)</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card stats-card">
                    <div class="stats-value" id="promedioSoacha">-</div>
                    <div class="stats-label">Promedio Soacha (m³/mes)</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card stats-card">
                    <div class="stats-value" id="promedioGachancipa">-</div>
                    <div class="stats-label">Promedio Gachancipá (m³/mes)</div>
                </div>
            </div>
        </div>

        <!-- Variación Porcentual -->
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card variation-card">
                    <div class="card-body">
                        <h6 class="card-title">
                            <i class="bi bi-percent text-primary"></i>
                            Variación Mensual Bogotá
                        </h6>
                        <div class="d-flex align-items-center mt-3">
                            <div class="stats-value" id="variacionBogota">-</div>
                            <span class="ms-2" id="trendBogota"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card variation-card">
                    <div class="card-body">
                        <h6 class="card-title">
                            <i class="bi bi-percent text-primary"></i>
                            Variación Mensual Soacha
                        </h6>
                        <div class="d-flex align-items-center mt-3">
                            <div class="stats-value" id="variacionSoacha">-</div>
                            <span class="ms-2" id="trendSoacha"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card variation-card">
                    <div class="card-body">
                        <h6 class="card-title">
                            <i class="bi bi-percent text-primary"></i>
                            Variación Mensual Gachancipá
                        </h6>
                        <div class="d-flex align-items-center mt-3">
                            <div class="stats-value" id="variacionGachancipa">-</div>
                            <span class="ms-2" id="trendGachancipa"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Gráfico de Consumo -->
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-graph-up text-primary"></i>
                            Tendencia de Consumo
                        </h5>
                        <div class="chart-container">
                            <canvas id="consumoChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Mapa -->
            <div class="col-lg-4">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-geo-alt text-primary"></i>
                            Mapa de Consumo de Agua
                        </h5>
                        <div id="mapaConsumo" style="height: 400px;"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Nuevos gráficos -->
        <div class="row mb-4">
            <!-- Gráfico de Barras Comparativo -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-bar-chart-fill text-primary"></i>
                            Comparativa Mensual
                        </h5>
                        <div class="comparison-chart">
                            <canvas id="comparativeChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Proyección -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-graph-up-arrow text-primary"></i>
                            Proyección Próximos 6 Meses
                        </h5>
                        <div class="projection-chart">
                            <canvas id="projectionChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tabla de Historial de Consumo -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">Historial de Consumo</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Mes</th>
                                <th>Consumo (m³)</th>
                                <th>Variación</th>
                                <th>Estado</th>
                            </tr>
                        </thead>
                        <tbody id="tablaHistorial">
                            <% if (consumos && consumos.length > 0) { %>
                                <% consumos.forEach(function(c, idx) { %>
                                    <tr>
                                        <td><%= c.Mes %></td>
                                        <td><%= c["Consumo Bogotá (m3-mes)"] %></td>
                                        <td>
                                            <% if (idx > 0) { %>
                                                <%= (((parseFloat(c["Consumo Bogotá (m3-mes)"]) - parseFloat(consumos[idx-1]["Consumo Bogotá (m3-mes)"])) / parseFloat(consumos[idx-1]["Consumo Bogotá (m3-mes)"])) * 100).toFixed(2) %>%
                                            <% } else { %>
                                                -
                                            <% } %>
                                        </td>
                                        <td>
                                            <% if (parseFloat(c["Consumo Bogotá (m3-mes)"]) > 20) { %>
                                                <span class="badge bg-danger">Alto</span>
                                            <% } else { %>
                                                <span class="badge bg-success">Normal</span>
                                            <% } %>
                                        </td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr><td colspan="4">No hay datos de consumo</td></tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Tabla de Facturas -->
        <div class="card mb-4">
            <div class="card-header">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="card-title mb-0">Mis Facturas</h5>
                    </div>
                    <div class="col-md-3">
                        <input type="text" class="form-control" id="searchFactura" placeholder="Buscar factura...">
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="filterEstado">
                            <option value="">Todos los estados</option>
                            <option value="pendiente">Pendiente</option>
                            <option value="pagada">Pagada</option>
                            <option value="vencida">Vencida</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <input type="date" class="form-control" id="fechaDesde" placeholder="Desde">
                    </div>
                    <div class="col-md-2">
                        <input type="date" class="form-control" id="fechaHasta" placeholder="Hasta">
                    </div>
                    <div class="col-md-2">
                        <div class="input-group">
                            <input type="number" class="form-control" id="consumoMin" placeholder="Consumo min">
                            <input type="number" class="form-control" id="consumoMax" placeholder="Consumo max">
                        </div>
                    </div>
                    <div class="col-auto">
                        <button class="btn btn-primary" onclick="showNuevaFacturaModal()">Nueva Factura</button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Número</th>
                                <th>Fecha</th>
                                <th>Consumo (m³)</th>
                                <th>Total</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                                </tr>
                        </thead>
                        <tbody id="facturasTableBody">
                            <!-- Las facturas se cargarán aquí -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Alerta de Facturas -->
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="alertaFacturas" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Alertas de Facturas</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body" id="alertaFacturasBody">
                    <!-- Las alertas se mostrarán aquí -->
                </div>
            </div>
        </div>

        <!-- Sección de Análisis y Alertas -->
        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Análisis de Consumo</h5>
                    </div>
                    <div class="card-body">
                        <div id="consumoStats">
                            <div class="alert alert-info">
                                <i class="fas fa-chart-line"></i> Cargando análisis...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Alertas y Recordatorios</h5>
                    </div>
                    <div class="card-body">
                        <div id="alertasContainer">
                            <div class="alert alert-info">
                                <i class="fas fa-bell"></i> Cargando alertas...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sección de Sostenibilidad -->
        <div class="card mb-4 mt-4" style="display: none;">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="bi bi-heart-fill text-danger"></i>
                    Apoya Nuestro Proyecto
                </h5>
                
                <!-- Tabs de Sostenibilidad -->
                <ul class="nav nav-tabs mb-3" id="sostenibilidadTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="donaciones-tab" data-bs-toggle="tab" data-bs-target="#donaciones" type="button" role="tab">
                            <i class="bi bi-gift"></i> Donaciones
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="membresia-tab" data-bs-toggle="tab" data-bs-target="#membresia" type="button" role="tab">
                            <i class="bi bi-star"></i> Membresía Premium
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="anuncios-tab" data-bs-toggle="tab" data-bs-target="#anuncios" type="button" role="tab">
                            <i class="bi bi-megaphone"></i> Anuncios Responsables
                        </button>
                    </li>
                </ul>
                
                <!-- Contenido de los Tabs -->
                <div class="tab-content" id="sostenibilidadContent">
                    <!-- Tab Donaciones -->
                    <div class="tab-pane fade show active" id="donaciones" role="tabpanel">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card border-primary mb-3">
                                    <div class="card-body">
                                        <h6 class="card-title">Donación Única</h6>
                                        <p class="card-text">Apoya nuestro proyecto con una donación única del monto que desees.</p>
                                        <div class="d-flex gap-2 mb-3">
                                            <button class="btn btn-outline-primary" onclick="donar(5000)">$5.000</button>
                                            <button class="btn btn-outline-primary" onclick="donar(10000)">$10.000</button>
                                            <button class="btn btn-outline-primary" onclick="donar(20000)">$20.000</button>
                                            <button class="btn btn-outline-primary" onclick="donar('custom')">Otro</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card border-success mb-3">
                                    <div class="card-body">
                                        <h6 class="card-title">Donación Mensual</h6>
                                        <p class="card-text">Conviértete en patrocinador mensual y recibe beneficios exclusivos.</p>
                                        <div class="d-flex gap-2">
                                            <button class="btn btn-outline-success" onclick="donarMensual(5000)">$5.000/mes</button>
                                            <button class="btn btn-outline-success" onclick="donarMensual(10000)">$10.000/mes</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Tab Membresía Premium -->
                    <div class="tab-pane fade" id="membresia" role="tabpanel">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">Plan Básico</h5>
                                        <h6 class="card-subtitle mb-2 text-muted">$5/mes</h6>
                                        <ul class="list-unstyled">
                                            <li><i class="bi bi-check-circle text-success"></i> Sin anuncios</li>
                                            <li><i class="bi bi-check-circle text-success"></i> Reportes básicos</li>
                                        </ul>
                                        <button class="btn btn-primary" onclick="seleccionarPlan('basico')">Seleccionar</button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card h-100 border-primary">
                                    <div class="card-body">
                                        <h5 class="card-title">Plan Pro</h5>
                                        <h6 class="card-subtitle mb-2 text-muted">$10/mes</h6>
                                        <ul class="list-unstyled">
                                            <li><i class="bi bi-check-circle text-success"></i> Sin anuncios</li>
                                            <li><i class="bi bi-check-circle text-success"></i> Reportes avanzados</li>
                                            <li><i class="bi bi-check-circle text-success"></i> Predicciones personalizadas</li>
                                        </ul>
                                        <button class="btn btn-primary" onclick="seleccionarPlan('pro')">Seleccionar</button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">Plan Empresarial</h5>
                                        <h6 class="card-subtitle mb-2 text-muted">$25/mes</h6>
                                        <ul class="list-unstyled">
                                            <li><i class="bi bi-check-circle text-success"></i> Todo lo del Plan Pro</li>
                                            <li><i class="bi bi-check-circle text-success"></i> API access</li>
                                            <li><i class="bi bi-check-circle text-success"></i> Soporte prioritario</li>
                                        </ul>
                                        <button class="btn btn-primary" onclick="seleccionarPlan('empresarial')">Seleccionar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Tab Anuncios -->
                    <div class="tab-pane fade" id="anuncios" role="tabpanel">
                        <div class="alert alert-info">
                            <h6><i class="bi bi-info-circle"></i> Sobre Nuestros Anuncios</h6>
                            <p>Nos comprometemos a mostrar solo anuncios:</p>
                            <ul>
                                <li>Relacionados con sostenibilidad y medio ambiente</li>
                                <li>De empresas comprometidas con la reducción del consumo de agua</li>
                                <li>De productos y servicios eco-amigables</li>
                            </ul>
                        </div>
                        <div id="anunciosContainer" class="row">
                            <!-- Los anuncios se cargarán dinámicamente aquí -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Login -->
    <div class="modal fade" id="loginModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Iniciar Sesión</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="loginForm">
                        <div class="mb-3">
                            <label for="loginEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="loginEmail" required>
                        </div>
                        <div class="mb-3">
                            <label for="loginPassword" class="form-label">Contraseña</label>
                            <input type="password" class="form-control" id="loginPassword" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Iniciar Sesión</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Registro -->
    <div class="modal fade" id="registroModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Registro</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="registroForm">
                        <div class="mb-3">
                            <label for="registroNombre" class="form-label">Nombre</label>
                            <input type="text" class="form-control" id="registroNombre" required>
                        </div>
                        <div class="mb-3">
                            <label for="registroApellido" class="form-label">Apellido</label>
                            <input type="text" class="form-control" id="registroApellido" required>
                        </div>
                        <div class="mb-3">
                            <label for="registroEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="registroEmail" required>
                        </div>
                        <div class="mb-3">
                            <label for="registroPassword" class="form-label">Contraseña</label>
                            <input type="password" class="form-control" id="registroPassword" required>
                            <div class="form-text">La contraseña debe tener al menos 6 caracteres.</div>
                        </div>
                        <div class="mb-3">
                            <label for="registroTelefono" class="form-label">Teléfono</label>
                            <input type="tel" class="form-control" id="registroTelefono">
                        </div>
                        <div class="mb-3">
                            <label for="registroDireccion" class="form-label">Dirección</label>
                            <input type="text" class="form-control" id="registroDireccion">
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="registroAceptaPoliticas" required>
                            <label class="form-check-label" for="registroAceptaPoliticas">
                                He leído y acepto las <a href="/politicas" target="_blank">políticas de uso y privacidad</a>
                            </label>
                        </div>
                        <button type="submit" class="btn btn-primary">Registrarse</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Contenedor para las facturas del usuario -->
    <div id="facturasContainer" class="container mt-4" style="display: none;">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                <h5 class="card-title mb-0">Mis Facturas</h5>
                            </div>
                            <div class="col">
                                <input type="text" class="form-control" id="searchFactura" placeholder="Buscar factura...">
                            </div>
                            <div class="col">
                                <select class="form-select" id="filterEstado">
                                    <option value="">Todos los estados</option>
                                    <option value="pendiente">Pendiente</option>
                                    <option value="pagada">Pagada</option>
                                    <option value="vencida">Vencida</option>
                                </select>
                            </div>
                            <div class="col-auto">
                                <button class="btn btn-primary" onclick="showNuevaFacturaModal()">Nueva Factura</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table" id="facturasTable">
                                <thead>
                                    <tr>
                                        <th>Número</th>
                                        <th>Fecha</th>
                                        <th>Consumo (m³)</th>
                                        <th>Total</th>
                                        <th>Estado</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody id="facturasTableBody">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-between align-items-center mt-3">
            <div>
                Mostrando <span id="itemsShowing">0</span> de <span id="totalItems">0</span> facturas
            </div>
            <div class="btn-group" id="pagination">
                <!-- Los botones de paginación se generarán dinámicamente -->
            </div>
        </div>
    </div>

    <!-- Modal para nueva factura/editar factura -->
    <div class="modal fade" id="facturaModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="facturaModalTitle">Nueva Factura</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="facturaForm">
                        <div class="mb-3">
                            <label class="form-label">Número de Factura</label>
                            <input type="text" class="form-control" id="numeroFactura" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha de Emisión</label>
                            <input type="date" class="form-control" id="fechaEmision" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Lectura Anterior</label>
                            <input type="number" class="form-control" id="lecturaAnterior" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Lectura Actual</label>
                            <input type="number" class="form-control" id="lecturaActual" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Imagen de la Factura</label>
                            <input type="file" class="form-control" id="imagenFactura" accept="image/*">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Estado</label>
                            <select class="form-select" id="estadoFacturaForm">
                                <option value="pendiente">Pendiente</option>
                                <option value="pagada">Pagada</option>
                                <option value="vencida">Vencida</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Guardar</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Donación Personalizada -->
    <div class="modal fade" id="donacionModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Donación Personalizada</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="montoPersonalizado" class="form-label">Monto a donar (COP)</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="montoPersonalizado" min="1000" step="1000">
                        </div>
                        <small class="text-muted">Monto mínimo: $1.000 COP</small>
                    </div>
                    <button class="btn btn-primary" onclick="procesarDonacionPersonalizada()">Donar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Pago PayU -->
    <div class="modal fade" id="payuModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Procesar Pago</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="payuForm" action="https://checkout.payulatam.com/ppp-web-gateway-payu/" method="post">
                        <input type="hidden" name="merchantId" value="<%= process.env.PAYU_MERCHANT_ID %>">
                        <input type="hidden" name="accountId" value="<%= process.env.PAYU_ACCOUNT_ID %>">
                        <input type="hidden" name="description" value="Donación ConsumoAgua">
                        <input type="hidden" name="referenceCode" id="payuReferenceCode">
                        <input type="hidden" name="amount" id="payuAmount">
                        <input type="hidden" name="tax" value="0">
                        <input type="hidden" name="taxReturnBase" value="0">
                        <input type="hidden" name="currency" value="COP">
                        <input type="hidden" name="signature" id="payuSignature">
                        <input type="hidden" name="test" value="<%= process.env.NODE_ENV === 'development' ? '1' : '0' %>">
                        <input type="hidden" name="buyerEmail" id="payuBuyerEmail">
                        <input type="hidden" name="responseUrl" value="<%= process.env.BASE_URL %>/donacion/exito">
                        <input type="hidden" name="confirmationUrl" value="<%= process.env.BASE_URL %>/donacion/confirmacion">
                        
                        <div class="mb-3">
                            <label for="payuEmail" class="form-label">Correo electrónico</label>
                            <input type="email" class="form-control" id="payuEmail" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="payuFullName" class="form-label">Nombre completo</label>
                            <input type="text" class="form-control" id="payuFullName" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="payuPhone" class="form-label">Teléfono</label>
                            <input type="tel" class="form-control" id="payuPhone" required>
                        </div>
                        
                        <button type="submit" class="btn btn-primary">Proceder al pago</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <% if (typeof userName !== 'undefined' && userName) { %>
    <div class="container mt-5" id="dashboardUsuario">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card text-center">
                    <div class="card-body">
                        <h3 class="card-title mb-4">Bienvenido, <span id="userNameDashboard"><%= userName %></span></h3>
                        <p class="mb-4">¿Qué deseas hacer?</p>
                        <a href="/auth/perfil" class="btn btn-outline-secondary mb-2">Ver Perfil</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <% } %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/regression@2.0.1/dist/regression.min.js"></script>

    <script type="application/json" id="consumosData">
        <%- JSON.stringify(consumos) %>
    </script>

    <script>
        // Función para convertir string a número
        function parseConsumo(valor) {
            if (!valor) return 0;
            return parseFloat(valor.replace(',', '.')) || 0;
        }

        // Función para calcular promedio
        function calcularPromedio(arr) {
            return (arr.reduce((a, b) => a + b, 0) / arr.length).toFixed(2);
        }

        // Nueva función para calcular variación porcentual
        function calcularVariacion(actual, anterior) {
            if (!anterior) return 0;
            return ((actual - anterior) / anterior * 100).toFixed(2);
        }

        // Nueva función para crear indicador de tendencia
        function crearIndicadorTendencia(variacion) {
            const valor = parseFloat(variacion);
            if (valor > 0) {
                return `<span class="trend-indicator trend-up">
                    <i class="bi bi-arrow-up-right"></i>${Math.abs(valor)}%
                </span>`;
            } else if (valor < 0) {
                return `<span class="trend-indicator trend-down">
                    <i class="bi bi-arrow-down-right"></i>${Math.abs(valor)}%
                </span>`;
            }
            return `<span class="trend-indicator trend-neutral">
                <i class="bi bi-arrow-right"></i>0%
            </span>`;
        }

        // Nueva función para calcular proyección lineal
        function calcularProyeccion(datos, meses) {
            const points = datos.map((y, x) => [x, y]);
            const result = regression.linear(points);
            const proyeccion = [];
            
            for (let i = datos.length; i < datos.length + meses; i++) {
                proyeccion.push(result.predict(i)[1]);
            }
            
            return proyeccion;
        }

        const consumosData = JSON.parse(document.getElementById('consumosData').textContent);
        console.log('Datos disponibles:', consumosData);

        if (consumosData && consumosData.length > 0) {
            // Preparar datos
            const meses = consumosData.map(c => c.Mes || '');
            const consumoBogota = consumosData.map(c => parseConsumo(c["Consumo Bogotá (m3-mes)"]));
            const consumoSoacha = consumosData.map(c => parseConsumo(c["Consumo Soacha (m3-mes)"]));
            const consumoGachancipa = consumosData.map(c => parseConsumo(c["Consumo Gachancipá (m3-mes)"]));

            // Calcular variaciones
            const ultimoMesBogota = consumoBogota[consumoBogota.length - 1];
            const penultimoMesBogota = consumoBogota[consumoBogota.length - 2];
            const variacionBogota = calcularVariacion(ultimoMesBogota, penultimoMesBogota);

            // Actualizar promedios en las tarjetas superiores
            document.getElementById('promedioBogota').textContent = calcularPromedio(consumoBogota);
            document.getElementById('promedioSoacha').textContent = calcularPromedio(consumoSoacha);
            document.getElementById('promedioGachancipa').textContent = calcularPromedio(consumoGachancipa);

            const ultimoMesSoacha = consumoSoacha[consumoSoacha.length - 1];
            const penultimoMesSoacha = consumoSoacha[consumoSoacha.length - 2];
            const variacionSoacha = calcularVariacion(ultimoMesSoacha, penultimoMesSoacha);

            const ultimoMesGachancipa = consumoGachancipa[consumoGachancipa.length - 1];
            const penultimoMesGachancipa = consumoGachancipa[consumoGachancipa.length - 2];
            const variacionGachancipa = calcularVariacion(ultimoMesGachancipa, penultimoMesGachancipa);

            // Actualizar indicadores de variación
            document.getElementById('variacionBogota').textContent = `${variacionBogota}%`;
            document.getElementById('trendBogota').innerHTML = crearIndicadorTendencia(variacionBogota);
            
            document.getElementById('variacionSoacha').textContent = `${variacionSoacha}%`;
            document.getElementById('trendSoacha').innerHTML = crearIndicadorTendencia(variacionSoacha);
            
            document.getElementById('variacionGachancipa').textContent = `${variacionGachancipa}%`;
            document.getElementById('trendGachancipa').innerHTML = crearIndicadorTendencia(variacionGachancipa);

            // Calcular proyecciones
            const mesesProyeccion = 6;
            const proyeccionBogota = calcularProyeccion(consumoBogota, mesesProyeccion);
            const proyeccionSoacha = calcularProyeccion(consumoSoacha, mesesProyeccion);
            const proyeccionGachancipa = calcularProyeccion(consumoGachancipa, mesesProyeccion);

            // Generar meses futuros
            const ultimoMes = new Date(meses[meses.length - 1].split('-')[1] + '-01-20' + meses[meses.length - 1].split('-')[0]);
            const mesesFuturos = Array.from({length: mesesProyeccion}, (_, i) => {
                const fecha = new Date(ultimoMes);
                fecha.setMonth(fecha.getMonth() + i + 1);
                return `${fecha.toLocaleString('es', {month: 'short'})}-${fecha.getFullYear().toString().slice(-2)}`;
            });

            // Gráfico comparativo
            const ctxComparative = document.getElementById('comparativeChart').getContext('2d');
            new Chart(ctxComparative, {
                type: 'bar',
                data: {
                    labels: meses.slice(-6),
                    datasets: [
                        {
                            label: 'Bogotá',
                            data: consumoBogota.slice(-6),
                            backgroundColor: 'rgba(37, 99, 235, 0.7)',
                        },
                        {
                            label: 'Soacha',
                            data: consumoSoacha.slice(-6),
                            backgroundColor: 'rgba(219, 39, 119, 0.7)',
                        },
                        {
                            label: 'Gachancipá',
                            data: consumoGachancipa.slice(-6),
                            backgroundColor: 'rgba(124, 58, 237, 0.7)',
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });

            // Gráfico de proyección
            const ctxProjection = document.getElementById('projectionChart').getContext('2d');
            new Chart(ctxProjection, {
                type: 'line',
                data: {
                    labels: [...meses.slice(-6), ...mesesFuturos],
                    datasets: [
                        {
                            label: 'Bogotá',
                            data: [...consumoBogota.slice(-6), ...proyeccionBogota],
                            borderColor: '#2563eb',
                            segment: {
                                borderDash: ctx => ctx.p0.parsed.x >= consumoBogota.slice(-6).length - 1 ? [6, 6] : undefined,
                            }
                        },
                        {
                            label: 'Soacha',
                            data: [...consumoSoacha.slice(-6), ...proyeccionSoacha],
                            borderColor: '#db2777',
                            segment: {
                                borderDash: ctx => ctx.p0.parsed.x >= consumoSoacha.slice(-6).length - 1 ? [6, 6] : undefined,
                            }
                        },
                        {
                            label: 'Gachancipá',
                            data: [...consumoGachancipa.slice(-6), ...proyeccionGachancipa],
                            borderColor: '#7c3aed',
                            segment: {
                                borderDash: ctx => ctx.p0.parsed.x >= consumoGachancipa.slice(-6).length - 1 ? [6, 6] : undefined,
                            }
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const dataIndex = context.dataIndex;
                                    const datasetLength = consumoBogota.slice(-6).length;
                                    const isProjection = dataIndex >= datasetLength;
                                    return `${context.dataset.label}: ${context.parsed.y.toFixed(2)} m³/mes ${isProjection ? '(Proyección)' : ''}`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });

            // Gráfico principal de tendencia
            const ctxConsumo = document.getElementById('consumoChart').getContext('2d');
            new Chart(ctxConsumo, {
                type: 'line',
                data: {
                    labels: meses,
                    datasets: [
                        {
                            label: 'Bogotá',
                            data: consumoBogota,
                            borderColor: '#2563eb',
                            backgroundColor: 'rgba(37, 99, 235, 0.1)',
                            tension: 0.4,
                            fill: true
                        },
                        {
                            label: 'Soacha',
                            data: consumoSoacha,
                            borderColor: '#db2777',
                            backgroundColor: 'rgba(219, 39, 119, 0.1)',
                            tension: 0.4,
                            fill: true
                        },
                        {
                            label: 'Gachancipá',
                            data: consumoGachancipa,
                            borderColor: '#7c3aed',
                            backgroundColor: 'rgba(124, 58, 237, 0.1)',
                            tension: 0.4,
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                padding: 20,
                                font: {
                                    family: 'Inter',
                                    size: 12
                                },
                                usePointStyle: true
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            titleColor: '#1e293b',
                            bodyColor: '#1e293b',
                            borderColor: '#e2e8f0',
                            borderWidth: 1,
                            padding: 12,
                            callbacks: {
                                label: function(context) {
                                    return context.dataset.label + ': ' + context.parsed.y.toFixed(2) + ' m³/mes';
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            grid: {
                                color: 'rgba(226, 232, 240, 0.5)'
                            },
                            ticks: {
                                font: {
                                    family: 'Inter'
                                }
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                font: {
                                    family: 'Inter'
                                }
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        axis: 'x',
                        intersect: false
                    }
                }
            });

            // Inicializar el mapa
            const map = L.map('mapaConsumo').setView([4.6097, -74.0817], 9);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            // Agregar marcadores para las ciudades
            const ciudades = [
                {
                    nombre: 'Bogotá',
                    coords: [4.6097, -74.0817],
                    consumo: calcularPromedio(consumoBogota)
                },
                {
                    nombre: 'Soacha',
                    coords: [4.5789, -74.2121],
                    consumo: calcularPromedio(consumoSoacha)
                },
                {
                    nombre: 'Gachancipá',
                    coords: [4.9925, -73.8757],
                    consumo: calcularPromedio(consumoGachancipa)
                }
            ];

            ciudades.forEach(ciudad => {
                L.marker(ciudad.coords)
                    .bindPopup(`
                        <strong>${ciudad.nombre}</strong><br>
                        Consumo promedio: ${ciudad.consumo} m³/mes
                    `)
                    .addTo(map);
            });

            // Agregar polígonos para las áreas de servicio
            const estiloPoligono = {
                color: '#2563eb',
                weight: 2,
                opacity: 0.6,
                fillOpacity: 0.1
            };

            // Ejemplo de polígonos simplificados para las áreas de servicio
            const areaBogota = L.circle([4.6097, -74.0817], {
                ...estiloPoligono,
                radius: 15000
            }).addTo(map);

            const areaSoacha = L.circle([4.5789, -74.2121], {
                ...estiloPoligono,
                radius: 8000
            }).addTo(map);

            const areaGachancipa = L.circle([4.9925, -73.8757], {
                ...estiloPoligono,
                radius: 5000
            }).addTo(map);
        }

        // Función para manejar el modo oscuro
        function initTheme() {
            const themeToggle = document.getElementById('themeToggle');
            const html = document.documentElement;
            
            // Recuperar preferencia guardada
            const savedTheme = localStorage.getItem('theme') || 'light';
            html.setAttribute('data-bs-theme', savedTheme);

            themeToggle.addEventListener('click', () => {
                const currentTheme = html.getAttribute('data-bs-theme');
                const newTheme = currentTheme === 'light' ? 'dark' : 'light';
                
                html.setAttribute('data-bs-theme', newTheme);
                localStorage.setItem('theme', newTheme);
                
                // Actualizar estilos de los gráficos
                updateChartsTheme(newTheme);
            });
        }

        // Función para actualizar el tema de los gráficos
        function updateChartsTheme(theme) {
            Chart.defaults.color = theme === 'dark' ? '#e2e8f0' : '#1e293b';
            Chart.defaults.borderColor = theme === 'dark' ? '#334155' : '#e2e8f0';
            
            // Actualizar todos los gráficos
            Chart.instances.forEach(chart => {
                // Actualizar colores de la cuadrícula
                if (chart.options.scales?.y) {
                    chart.options.scales.y.grid.color = theme === 'dark' ? 'rgba(51, 65, 85, 0.5)' : 'rgba(226, 232, 240, 0.5)';
                }
                
                // Actualizar tooltips
                if (chart.options.plugins?.tooltip) {
                    chart.options.plugins.tooltip.backgroundColor = theme === 'dark' ? '#1e293b' : 'rgba(255, 255, 255, 0.9)';
                    chart.options.plugins.tooltip.titleColor = theme === 'dark' ? '#e2e8f0' : '#1e293b';
                    chart.options.plugins.tooltip.bodyColor = theme === 'dark' ? '#e2e8f0' : '#1e293b';
                    chart.options.plugins.tooltip.borderColor = theme === 'dark' ? '#334155' : '#e2e8f0';
                }
                
                chart.update();
            });
        }

        // Inicializar tema antes de crear los gráficos
        initTheme();

        // Función para mostrar mensajes
        function mostrarMensaje(mensaje, esError = false) {
            alert(mensaje); // Puedes mejorar esto con una librería de notificaciones
        }

        // Función para cargar las facturas del usuario
        async function cargarFacturas() {
            const token = localStorage.getItem('token');
            if (!token) {
                console.log('No hay token disponible');
                return;
            }

            try {
                const response = await fetch('/facturas', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const facturas = await response.json();
                console.log('Facturas recibidas:', facturas);

                const tbody = document.getElementById('facturasTableBody');
                tbody.innerHTML = '';

                facturas.forEach(factura => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                        <td>${factura.numeroFactura}</td>
                        <td>${new Date(factura.fechaEmision).toLocaleDateString()}</td>
                        <td>${factura.consumo.lecturaAnterior}</td>
                        <td>${factura.consumo.lecturaActual}</td>
                        <td>${factura.consumo.consumoTotal}</td>
                        <td>$${factura.valores.total.toLocaleString()}</td>
                        <td>$${factura.valores.total.toLocaleString()}</td>
                        <td>${factura.estado}</td>
                        <td>
                            <button class="btn btn-sm btn-primary" onclick="editarFactura('${factura._id}')">Editar</button>
                            <button class="btn btn-sm btn-danger" onclick="eliminarFactura('${factura._id}')">Eliminar</button>
                        </td>
                    `;
                    tbody.appendChild(tr);
                });
            } catch (error) {
                console.error('Error al cargar facturas:', error);
                alert('Error al cargar las facturas');
            }
        }

        // Modificar la función de login para incluir el ID del usuario y cargar facturas
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                email: document.getElementById('loginEmail').value,
                password: document.getElementById('loginPassword').value
            };

            try {
                const response = await fetch('/auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (response.ok) {
                    // Guardar datos del usuario
                    localStorage.setItem('token', data.token);
                    localStorage.setItem('userName', data.usuario.nombre);
                    localStorage.setItem('userId', data.usuario.id);
                    
                    // Actualizar la UI
                    document.getElementById('userSession').style.display = 'flex';
                    document.getElementById('authLinks').style.display = 'none';
                    document.getElementById('userName').textContent = data.usuario.nombre;
                    
                    // Cerrar el modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('loginModal'));
                    modal.hide();
                    
                    // Limpiar el formulario
                    e.target.reset();
                    
                    // Cargar facturas del usuario
                    cargarFacturas();
                    
                    alert('Inicio de sesión exitoso');
                } else {
                    alert(data.error || 'Error en el inicio de sesión');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error en el inicio de sesión');
            }
        });

        // Modificar la función de registro para incluir el ID del usuario y cargar facturas
        document.getElementById('registroForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!verificarPoliticas()) {
                return;
            }
            
            const formData = {
                        nombre: document.getElementById('registroNombre').value,
                        apellido: document.getElementById('registroApellido').value,
                        email: document.getElementById('registroEmail').value,
                        password: document.getElementById('registroPassword').value,
                        telefono: document.getElementById('registroTelefono').value,
                direccion: document.getElementById('registroDireccion').value
            };

            try {
                const response = await fetch('/auth/registro', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (response.ok) {
                    // Guardar datos del usuario
                    localStorage.setItem('token', data.token);
                    localStorage.setItem('userName', data.usuario.nombre);
                    localStorage.setItem('userId', data.usuario.id);
                    
                    // Actualizar la UI
                    document.getElementById('userSession').style.display = 'flex';
                    document.getElementById('authLinks').style.display = 'none';
                    document.getElementById('userName').textContent = data.usuario.nombre;
                    
                    // Cerrar el modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('registroModal'));
                    modal.hide();
                    
                    // Limpiar el formulario
                    e.target.reset();
                    
                    // Mostrar el contenedor de facturas vacío
                    document.getElementById('facturasContainer').style.display = 'block';
                    cargarFacturas(); // Ahora carga las facturas después del registro
                    
                    alert('Registro exitoso');
                } else {
                    alert(data.error || 'Error en el registro');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error en el registro');
            }
        });

        // Función para mostrar el contenedor de facturas
        function showFacturas() {
            document.getElementById('facturasContainer').style.display = 'block';
            cargarFacturas();
        }

        // Función para crear nueva factura
        async function crearFactura(formData) {
            const token = localStorage.getItem('token');
            const userId = localStorage.getItem('userId');
            
            if (!token || !userId) {
                alert('Debe iniciar sesión para crear facturas');
                return;
            }

            try {
                const response = await fetch('/facturas', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        ...formData,
                        usuarioId: userId
                    })
                });

                if (response.ok) {
                    alert('Factura creada exitosamente');
                    cargarFacturas();
                } else {
                const data = await response.json();
                    alert(data.error || 'Error al crear la factura');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al crear la factura');
            }
        }

        // Función para editar factura
        async function editarFactura(facturaId) {
            const token = localStorage.getItem('token');
            if (!token) return;

            try {
                const response = await fetch(`/facturas/${facturaId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    const factura = await response.json();
                    // Rellenar el formulario con los datos de la factura
                    document.getElementById('numeroFactura').value = factura.numeroFactura;
                    document.getElementById('fechaEmision').value = factura.fechaEmision.split('T')[0];
                    document.getElementById('lecturaAnterior').value = factura.consumo.lecturaAnterior;
                    document.getElementById('lecturaActual').value = factura.consumo.lecturaActual;
                    
                    // Mostrar el modal
                    const modal = new bootstrap.Modal(document.getElementById('facturaModal'));
                    modal.show();
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        // Función para eliminar factura
        async function eliminarFactura(facturaId) {
            if (!confirm('¿Está seguro de eliminar esta factura?')) return;

            const token = localStorage.getItem('token');
            if (!token) return;

            try {
                const response = await fetch(`/facturas/${facturaId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    alert('Factura eliminada exitosamente');
                    cargarFacturas();
                } else {
                    alert('Error al eliminar la factura');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al eliminar la factura');
            }
        }

        // Modificar la función de logout para limpiar todo
        function cerrarSesion() {
            localStorage.clear();
            window.location.href = '/';
            setTimeout(() => window.location.reload(), 100);
        }

        // Verificar si hay un usuario logueado al cargar la página
        document.addEventListener('DOMContentLoaded', function() {
            const token = localStorage.getItem('token');
            const userName = localStorage.getItem('userName');
            
            if (token && userName) {
                document.getElementById('userSession').style.display = 'flex';
                document.getElementById('authLinks').style.display = 'none';
                document.getElementById('userName').textContent = userName;
                cargarFacturas(); // Ahora carga las facturas al cargar la página si hay sesión
            } else {
                document.getElementById('userSession').style.display = 'none';
                document.getElementById('authLinks').style.display = 'flex';
            }
        });

        // Función para verificar aceptación de políticas
        function verificarPoliticas() {
            const aceptaPoliticas = document.getElementById('registroAceptaPoliticas');
            if (!aceptaPoliticas.checked) {
                alert('Debe aceptar las políticas de uso y privacidad para continuar');
                return false;
            }
            return true;
        }

        // Agregar verificación de políticas al formulario de registro
        document.getElementById('registroForm').addEventListener('submit', function(e) {
            if (!verificarPoliticas()) {
                e.preventDefault();
            }
        });

        // Funciones de donación y membresía
        function donar(monto) {
            if (monto === 'custom') {
                $('#donacionModal').modal('show');
            } else {
                procesarDonacion(monto);
            }
        }

        function donarMensual(monto) {
            procesarDonacion(monto, true);
            }

        function procesarDonacionPersonalizada() {
            const monto = document.getElementById('montoPersonalizado').value;
            if (monto && monto >= 1000) {
                procesarDonacion(parseFloat(monto));
                $('#donacionModal').modal('hide');
            } else {
                alert('Por favor ingrese un monto válido (mínimo $1.000 COP)');
            }
        }

        function procesarDonacion(monto, mensual = false) {
            if (!monto || monto < 1000) {
                alert('El monto mínimo de donación es $1.000 COP');
                return;
            }
            
            // Generar referencia única
            const referenceCode = 'DON-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
            
            // Actualizar campos del formulario PayU
            document.getElementById('payuReferenceCode').value = referenceCode;
            document.getElementById('payuAmount').value = monto;
            document.getElementById('payuBuyerEmail').value = document.getElementById('payuEmail').value;
            
            // Calcular firma
            const signature = calcularFirmaPayU(referenceCode, monto, 'COP');
            document.getElementById('payuSignature').value = signature;
            
            // Mostrar modal de pago
            $('#payuModal').modal('show');
        }

        function calcularFirmaPayU(referenceCode, amount, currency) {
            const apiKey = '<%= process.env.PAYU_API_KEY %>';
            const merchantId = '<%= process.env.PAYU_MERCHANT_ID %>';
            const signatureString = `${apiKey}~${merchantId}~${referenceCode}~${amount}~${currency}`;
            return md5(signatureString);
        }

        function seleccionarPlan(plan) {
            // Aquí implementarías la lógica de suscripción
            alert(`Has seleccionado el plan ${plan}`);
        }

        // Cargar anuncios responsables
        function cargarAnuncios() {
            const anunciosContainer = document.getElementById('anunciosContainer');
            // Aquí implementarías la carga de anuncios desde tu sistema
            // Este es solo un ejemplo
            const anunciosEjemplo = [
                {
                    titulo: 'Productos Eco-friendly',
                    descripcion: 'Descubre nuestra línea de productos para el ahorro de agua',
                    imagen: 'path/to/image1.jpg'
                },
                {
                    titulo: 'Sistemas de Riego Eficiente',
                    descripcion: 'Tecnología de última generación para el ahorro de agua',
                    imagen: 'path/to/image2.jpg'
                }
            ];

            anunciosContainer.innerHTML = anunciosEjemplo.map(anuncio => `
                <div class="col-md-6 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">${anuncio.titulo}</h5>
                            <p class="card-text">${anuncio.descripcion}</p>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Cargar anuncios cuando se muestre la pestaña
        document.getElementById('anuncios-tab').addEventListener('shown.bs.tab', cargarAnuncios);

        function showNuevaFacturaModal() {
            const token = localStorage.getItem('token');
            if (!token) {
                alert('Debes iniciar sesión para crear una factura.');
                return;
            }
            const modal = new bootstrap.Modal(document.getElementById('facturaModal'));
            document.getElementById('facturaForm').reset();
            document.getElementById('facturaModalTitle').textContent = 'Nueva Factura';
            modal.show();
        }

        // Manejador para el formulario de nueva factura
        if (document.getElementById('facturaForm')) {
            document.getElementById('facturaForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const token = localStorage.getItem('token');
                if (!token) {
                    alert('Debes iniciar sesión para crear una factura.');
                    return;
                }

                const lecturaAnterior = parseFloat(document.getElementById('lecturaAnterior').value);
                const lecturaActual = parseFloat(document.getElementById('lecturaActual').value);
                const total = Math.abs(lecturaActual - lecturaAnterior) * 1000; // ejemplo de cálculo

                const formData = {
                    numeroFactura: document.getElementById('numeroFactura').value,
                    fechaEmision: document.getElementById('fechaEmision').value,
                    consumo: {
                        lecturaAnterior: lecturaAnterior,
                        lecturaActual: lecturaActual
                    },
                    valores: {
                        cargoFijo: 0,
                        consumo: 0,
                        otros: 0,
                        total: total
                    },
                    estado: document.getElementById('estadoFacturaForm').value
                };

                try {
                    const response = await fetch('/facturas', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify(formData)
                    });

                    if (response.ok) {
                        alert('Factura creada exitosamente');
                        // Cierra el modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('facturaModal'));
                        modal.hide();
                        // Recarga la tabla de facturas
                        cargarFacturas();
                    } else {
                        const data = await response.json();
                        alert(data.error || 'Error al crear la factura');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error al crear la factura');
                }
            });
        }

        // Función para cargar el análisis de consumo
        async function cargarAnalisisConsumo() {
            try {
                const response = await fetch('/analisis/consumo', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                const data = await response.json();
                
                const statsHtml = `
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Consumo Actual</h6>
                            <p class="h4">${data.consumoActual} m³</p>
                        </div>
                        <div class="col-md-6">
                            <h6>Promedio</h6>
                            <p class="h4">${Math.round(data.promedio)} m³</p>
                        </div>
                    </div>
                    <div class="mt-3">
                        <h6>Tendencia (últimos 3 meses)</h6>
                        <canvas id="tendenciaChart"></canvas>
                    </div>
                    ${data.alerta ? `
                        <div class="alert alert-warning mt-3">
                            <i class="fas fa-exclamation-triangle"></i>
                            Tu consumo actual es elevado. Considera revisar posibles fugas.
                        </div>
                    ` : ''}
                `;
                
                document.getElementById('consumoStats').innerHTML = statsHtml;
                
                // Crear gráfico de tendencia
                const ctx = document.getElementById('tendenciaChart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: ['Hace 2 meses', 'Mes pasado', 'Este mes'],
                        datasets: [{
                            label: 'Consumo (m³)',
                            data: data.tendencia,
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1
                        }]
                    }
                });
            } catch (error) {
                console.error('Error al cargar análisis:', error);
            }
        }

        // Función para cargar alertas y recordatorios
        async function cargarAlertas() {
            try {
                const response = await fetch('/analisis/recordatorios', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                const recordatorios = await response.json();
                
                if (recordatorios.length === 0) {
                    document.getElementById('alertasContainer').innerHTML = `
                        <div class="alert alert-success">
                            <i class="fas fa-check-circle"></i> No hay alertas pendientes
                        </div>
                    `;
                    return;
                }
                
                const alertasHtml = recordatorios.map(r => `
                    <div class="alert ${r.tipo === 'CONSUMO_ELEVADO' ? 'alert-warning' : 'alert-info'} mb-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <i class="fas ${r.tipo === 'CONSUMO_ELEVADO' ? 'fa-exclamation-triangle' : 'fa-bell'}"></i>
                                ${r.mensaje}
                            </div>
                            <button class="btn btn-sm btn-outline-secondary" onclick="marcarLeido('${r._id}')">
                                <i class="fas fa-check"></i>
                            </button>
                        </div>
                    </div>
                `).join('');
                
                document.getElementById('alertasContainer').innerHTML = alertasHtml;
            } catch (error) {
                console.error('Error al cargar alertas:', error);
            }
        }

        // Función para marcar recordatorio como leído
        async function marcarLeido(id) {
            try {
                await fetch(`/analisis/recordatorios/${id}/leido`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                cargarAlertas();
            } catch (error) {
                console.error('Error al marcar como leído:', error);
            }
        }

        // Cargar análisis y alertas al iniciar
        document.addEventListener('DOMContentLoaded', () => {
            cargarAnalisisConsumo();
            cargarAlertas();
        });

        // Función para procesar donación con PayPal
        async function procesarDonacionPayPal(monto) {
            try {
                const response = await fetch('/pagos/crear-orden', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({
                        monto: monto.toString(),
                        tipo: 'donacion'
                    })
                });

                const data = await response.json();
                
                if (data.error) {
                    alert(data.error);
                    return;
                }

                // Inicializar botones de PayPal
                paypal.Buttons({
                    createOrder: function() {
                        return data.id;
                    },
                    onApprove: async function(data, actions) {
                        try {
                            const response = await fetch(`/pagos/capturar/${data.orderID}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                                },
                                body: JSON.stringify({
                                    tipo: 'donacion'
                                })
                            });

                            const result = await response.json();
                            if (result.error) {
                                alert(result.error);
                            } else {
                                alert('¡Gracias por tu donación!');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Error al procesar el pago');
                        }
                    }
                }).render('#paypal-button-container');
            } catch (error) {
                console.error('Error:', error);
                alert('Error al procesar la donación');
            }
        }

        // Función para procesar membresía con PayPal
        async function procesarMembresiaPayPal(plan, monto) {
            try {
                const response = await fetch('/pagos/crear-orden', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({
                        monto: monto.toString(),
                        tipo: 'membresia',
                        plan: plan
                    })
                });

                const data = await response.json();
                
                if (data.error) {
                    alert(data.error);
                    return;
                }

                // Inicializar botones de PayPal
                paypal.Buttons({
                    createOrder: function() {
                        return data.id;
                    },
                    onApprove: async function(data, actions) {
                        try {
                            const response = await fetch(`/pagos/capturar/${data.orderID}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                                },
                                body: JSON.stringify({
                                    tipo: 'membresia',
                                    plan: plan
                                })
                            });

                            const result = await response.json();
                            if (result.error) {
                                alert(result.error);
                            } else {
                                alert('¡Membresía activada exitosamente!');
                                location.reload();
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Error al procesar el pago');
                        }
                    }
                }).render('#paypal-button-container');
            } catch (error) {
                console.error('Error:', error);
                alert('Error al procesar la membresía');
            }
        }

        // Función para verificar estado de membresía
        async function verificarMembresia() {
            try {
                const response = await fetch('/auth/perfil', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                const data = await response.json();
                
                if (data.membresia && data.membresia.activa) {
                    document.querySelectorAll('.membresia-btn').forEach(btn => {
                        btn.disabled = true;
                        btn.textContent = 'Membresía Activa';
                    });
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        // Verificar membresía al cargar la página
        document.addEventListener('DOMContentLoaded', verificarMembresia);

        // Función mejorada para filtrar facturas
        async function filtrarFacturas() {
            const token = localStorage.getItem('token');
            if (!token) return;

            const estado = document.getElementById('filterEstado').value;
            const busqueda = document.getElementById('searchFactura').value;
            const fechaDesde = document.getElementById('fechaDesde')?.value;
            const fechaHasta = document.getElementById('fechaHasta')?.value;
            const consumoMin = document.getElementById('consumoMin')?.value;
            const consumoMax = document.getElementById('consumoMax')?.value;

            try {
                // Construir query string
                const params = new URLSearchParams();
                if (estado) params.append('estado', estado);
                if (busqueda) params.append('busqueda', busqueda);
                if (fechaDesde) params.append('fechaDesde', fechaDesde);
                if (fechaHasta) params.append('fechaHasta', fechaHasta);
                if (consumoMin) params.append('consumoMin', consumoMin);
                if (consumoMax) params.append('consumoMax', consumoMax);

                console.log('Enviando filtros:', params.toString());

                const response = await fetch(`/facturas?${params.toString()}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log('Respuesta del servidor:', data);
                
                // Actualizar la tabla con animación
                const tbody = document.getElementById('facturasTableBody');
                tbody.style.opacity = '0';
                
                setTimeout(() => {
                    tbody.innerHTML = '';
                    
                    if (data.facturas && data.facturas.length > 0) {
                        data.facturas.forEach(factura => {
                            const tr = document.createElement('tr');
                            tr.innerHTML = `
                                <td>${factura.numeroFactura}</td>
                                <td>${new Date(factura.fechaEmision).toLocaleDateString()}</td>
                                <td>${factura.consumo.lecturaActual - factura.consumo.lecturaAnterior} m³</td>
                                <td>$${factura.valores.total.toLocaleString()}</td>
                                <td>
                                    <span class="badge bg-${getEstadoColor(factura.estado)}">
                                        ${factura.estado}
                                    </span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-primary" onclick="editarFactura('${factura._id}')">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" onclick="eliminarFactura('${factura._id}')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            `;
                            tbody.appendChild(tr);
                        });
                    } else {
                        tbody.innerHTML = '<tr><td colspan="6" class="text-center">No se encontraron facturas</td></tr>';
                    }
                    
                    tbody.style.opacity = '1';
                }, 300);

                // Actualizar información de paginación
                if (data.paginacion) {
                    document.getElementById('itemsShowing').textContent = data.facturas.length;
                    document.getElementById('totalItems').textContent = data.paginacion.total;
                    actualizarPaginacion(data.paginacion.paginaActual, data.paginacion.totalPaginas);
                }

            } catch (error) {
                console.error('Error al filtrar facturas:', error);
                mostrarMensaje('Error al filtrar las facturas', true);
            }
        }

        // Agregar estilos para animaciones
        const style = document.createElement('style');
        style.textContent = `
            #facturasTableBody {
                transition: opacity 0.3s ease;
            }
            
            .badge {
                transition: all 0.3s ease;
            }
            
            .btn {
                transition: transform 0.2s ease;
            }
            
            .btn:hover {
                transform: scale(1.1);
            }
            
            .card {
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }
            
            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }
        `;
        document.head.appendChild(style);

        // Función para obtener el color del estado
        function getEstadoColor(estado) {
            switch (estado.toLowerCase()) {
                case 'pagada':
                    return 'success';
                case 'pendiente':
                    return 'warning';
                case 'vencida':
                    return 'danger';
                default:
                    return 'secondary';
            }
        }

        // Función para actualizar la paginación
        function actualizarPaginacion(paginaActual, totalPaginas) {
            const pagination = document.getElementById('pagination');
            if (!pagination) return;
            
            pagination.innerHTML = '';

            // Botón anterior
            const prevButton = document.createElement('button');
            prevButton.className = `btn btn-outline-primary ${paginaActual === 1 ? 'disabled' : ''}`;
            prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
            prevButton.onclick = () => cambiarPagina(paginaActual - 1);
            pagination.appendChild(prevButton);

            // Números de página
            const maxPages = 5;
            let startPage = Math.max(1, paginaActual - Math.floor(maxPages / 2));
            let endPage = Math.min(totalPaginas, startPage + maxPages - 1);

            if (endPage - startPage + 1 < maxPages) {
                startPage = Math.max(1, endPage - maxPages + 1);
            }

            for (let i = startPage; i <= endPage; i++) {
                const pageButton = document.createElement('button');
                pageButton.className = `btn btn-outline-primary ${i === paginaActual ? 'active' : ''}`;
                pageButton.textContent = i;
                pageButton.onclick = () => cambiarPagina(i);
                pagination.appendChild(pageButton);
            }

            // Botón siguiente
            const nextButton = document.createElement('button');
            nextButton.className = `btn btn-outline-primary ${paginaActual === totalPaginas ? 'disabled' : ''}`;
            nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
            nextButton.onclick = () => cambiarPagina(paginaActual + 1);
            pagination.appendChild(nextButton);
        }

        // Función para cambiar de página
        async function cambiarPagina(nuevaPagina) {
            const token = localStorage.getItem('token');
            if (!token) return;

            const estado = document.getElementById('filterEstado').value;
            const busqueda = document.getElementById('searchFactura').value;
            const fechaDesde = document.getElementById('fechaDesde')?.value;
            const fechaHasta = document.getElementById('fechaHasta')?.value;
            const consumoMin = document.getElementById('consumoMin')?.value;
            const consumoMax = document.getElementById('consumoMax')?.value;

            try {
                const params = new URLSearchParams();
                params.append('pagina', nuevaPagina);
                if (estado) params.append('estado', estado);
                if (busqueda) params.append('busqueda', busqueda);
                if (fechaDesde) params.append('fechaDesde', fechaDesde);
                if (fechaHasta) params.append('fechaHasta', fechaHasta);
                if (consumoMin) params.append('consumoMin', consumoMin);
                if (consumoMax) params.append('consumoMax', consumoMax);

                const response = await fetch(`/facturas?${params.toString()}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                
                // Actualizar la tabla
                const tbody = document.getElementById('facturasTableBody');
                tbody.innerHTML = '';

                if (data.facturas && data.facturas.length > 0) {
                    data.facturas.forEach(factura => {
                        const tr = document.createElement('tr');
                        tr.innerHTML = `
                            <td>${factura.numeroFactura}</td>
                            <td>${new Date(factura.fechaEmision).toLocaleDateString()}</td>
                            <td>${factura.consumo.lecturaActual - factura.consumo.lecturaAnterior} m³</td>
                            <td>$${factura.valores.total.toLocaleString()}</td>
                            <td>
                                <span class="badge bg-${getEstadoColor(factura.estado)}">
                                    ${factura.estado}
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-primary" onclick="editarFactura('${factura._id}')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="eliminarFactura('${factura._id}')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        `;
                        tbody.appendChild(tr);
                    });
                } else {
                    tbody.innerHTML = '<tr><td colspan="6" class="text-center">No se encontraron facturas</td></tr>';
                }

                // Actualizar paginación
                if (data.paginacion) {
                    document.getElementById('itemsShowing').textContent = data.facturas.length;
                    document.getElementById('totalItems').textContent = data.paginacion.total;
                    actualizarPaginacion(data.paginacion.paginaActual, data.paginacion.totalPaginas);
                }

            } catch (error) {
                console.error('Error al cambiar de página:', error);
                mostrarMensaje('Error al cambiar de página', true);
            }
        }

        // Función para mostrar mensajes
        function mostrarMensaje(mensaje, esError = false) {
            const alertaFacturas = document.getElementById('alertaFacturas');
            const alertaFacturasBody = document.getElementById('alertaFacturasBody');
            
            alertaFacturasBody.innerHTML = mensaje;
            alertaFacturas.classList.remove('bg-success', 'bg-danger');
            alertaFacturas.classList.add(esError ? 'bg-danger' : 'bg-success');
            
            const toast = new bootstrap.Toast(alertaFacturas);
            toast.show();
        }

        // Agregar event listeners para los filtros
        document.addEventListener('DOMContentLoaded', () => {
            console.log('Configurando event listeners para filtros...');
            
            const filterEstado = document.getElementById('filterEstado');
            const searchFactura = document.getElementById('searchFactura');
            const fechaDesde = document.getElementById('fechaDesde');
            const fechaHasta = document.getElementById('fechaHasta');
            const consumoMin = document.getElementById('consumoMin');
            const consumoMax = document.getElementById('consumoMax');

            if (filterEstado) {
                console.log('Agregando listener para filterEstado');
                filterEstado.addEventListener('change', () => {
                    console.log('Estado cambiado:', filterEstado.value);
                    filtrarFacturas();
                });
            }

            if (searchFactura) {
                console.log('Agregando listener para searchFactura');
                searchFactura.addEventListener('input', debounce(() => {
                    console.log('Búsqueda cambiada:', searchFactura.value);
                    filtrarFacturas();
                }, 500));
            }

            if (fechaDesde) {
                console.log('Agregando listener para fechaDesde');
                fechaDesde.addEventListener('change', () => {
                    console.log('Fecha desde cambiada:', fechaDesde.value);
                    filtrarFacturas();
                });
            }

            if (fechaHasta) {
                console.log('Agregando listener para fechaHasta');
                fechaHasta.addEventListener('change', () => {
                    console.log('Fecha hasta cambiada:', fechaHasta.value);
                    filtrarFacturas();
                });
            }

            if (consumoMin) {
                console.log('Agregando listener para consumoMin');
                consumoMin.addEventListener('change', () => {
                    console.log('Consumo mínimo cambiado:', consumoMin.value);
                    filtrarFacturas();
                });
            }

            if (consumoMax) {
                console.log('Agregando listener para consumoMax');
                consumoMax.addEventListener('change', () => {
                    console.log('Consumo máximo cambiado:', consumoMax.value);
                    filtrarFacturas();
                });
            }

            // Cargar facturas inicialmente
            filtrarFacturas();
        });

        // Función debounce para evitar múltiples llamadas
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Función para cargar datos del mapa
        async function cargarDatosMapa() {
            try {
                const response = await fetch('/api/sostenibilidad');
                const data = await response.json();
                
                // Inicializar el mapa
                const map = L.map('mapaConsumo').setView([4.6097, -74.0817], 9);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '© OpenStreetMap contributors'
                }).addTo(map);

                // Agregar marcadores para las ciudades con datos de consumo
                const ciudades = [
                    {
                        nombre: 'Bogotá',
                        coords: [4.6097, -74.0817],
                        consumo: data.metricas?.consumo_per_capita || 0
                    },
                    {
                        nombre: 'Soacha',
                        coords: [4.5789, -74.2121],
                        consumo: data.metricas?.consumo_per_capita || 0
                    },
                    {
                        nombre: 'Gachancipá',
                        coords: [4.9925, -73.8757],
                        consumo: data.metricas?.consumo_per_capita || 0
                    }
                ];

                // Crear capa de círculos para mostrar consumo
                const circulosConsumo = L.layerGroup().addTo(map);

                ciudades.forEach(ciudad => {
                    // Calcular radio basado en el consumo
                    const radio = Math.sqrt(ciudad.consumo) * 1000; // Ajustar escala según necesidad
                    
                    // Crear círculo con gradiente de color basado en el consumo
                    const color = ciudad.consumo > 20 ? '#ff4444' : 
                                 ciudad.consumo > 10 ? '#ffbb33' : '#00C851';
                    
                    const circulo = L.circle(ciudad.coords, {
                        radius: radio,
                        color: color,
                        fillColor: color,
                        fillOpacity: 0.4,
                        weight: 1
                    }).addTo(circulosConsumo);

                    // Agregar marcador con popup
                    L.marker(ciudad.coords)
                        .bindPopup(`
                            <strong>${ciudad.nombre}</strong><br>
                            Consumo per cápita: ${ciudad.consumo.toFixed(2)} m³/mes<br>
                            Eficiencia hídrica: ${data.metricas?.eficiencia_hidrica?.toFixed(2) || 0}%<br>
                            Ahorro mensual: ${data.metricas?.ahorro_mensual?.toFixed(2) || 0}%
                        `)
                        .addTo(map);
                });

                // Agregar leyenda
                const legend = L.control({position: 'bottomright'});
                legend.onAdd = function(map) {
                    const div = L.DomUtil.create('div', 'info legend');
                    div.innerHTML = `
                        <h4>Consumo de Agua</h4>
                        <div style="background: #00C851; width: 20px; height: 20px; display: inline-block;"></div> Bajo<br>
                        <div style="background: #ffbb33; width: 20px; height: 20px; display: inline-block;"></div> Medio<br>
                        <div style="background: #ff4444; width: 20px; height: 20px; display: inline-block;"></div> Alto
                    `;
                    return div;
                };
                legend.addTo(map);

            } catch (error) {
                console.error('Error al cargar datos del mapa:', error);
            }
        }

        // Llamar a la función cuando se carga la página
        document.addEventListener('DOMContentLoaded', cargarDatosMapa);

    </script>
</body>
</html>