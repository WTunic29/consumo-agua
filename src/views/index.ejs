<!DOCTYPE html>
<html lang="es" data-bs-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #1e40af;
            --background-color: #f8fafc;
            --card-background: #ffffff;
            --text-color: #1e293b;
            --border-color: #e2e8f0;
            --chart-grid-color: rgba(226, 232, 240, 0.5);
        }

        [data-bs-theme="dark"] {
            --primary-color: #60a5fa;
            --secondary-color: #3b82f6;
            --background-color: #0f172a;
            --card-background: #1e293b;
            --text-color: #e2e8f0;
            --border-color: #334155;
            --chart-grid-color: rgba(51, 65, 85, 0.5);
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .navbar {
            background-color: var(--card-background);
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: background-color 0.3s ease;
        }

        .chart-container {
            height: 400px;
            margin-bottom: 20px;
        }

        #mapaConsumo {
            height: 400px;
            width: 100%;
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1);
        }

        .card {
            background-color: var(--card-background);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1);
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .card:hover {
            transform: translateY(-2px);
        }

        .card-title {
            color: var(--text-color);
            font-weight: 600;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .table {
            margin-bottom: 0;
        }

        .table th {
            background-color: var(--background-color);
            border-bottom: 2px solid var(--border-color);
            font-weight: 600;
        }

        .table td {
            border-color: var(--border-color);
            color: var(--text-color);
            vertical-align: middle;
        }

        .table-responsive {
            max-height: 400px;
            overflow-y: auto;
            scrollbar-width: thin;
        }

        .table-responsive::-webkit-scrollbar {
            width: 6px;
        }

        .table-responsive::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .table-responsive::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 3px;
        }

        .stats-card {
            padding: 1.5rem;
            text-align: center;
        }

        .stats-value {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .stats-label {
            font-size: 0.875rem;
            color: var(--text-color);
            opacity: 0.7;
        }

        @media (max-width: 768px) {
            .card {
                margin-bottom: 1rem;
            }
        }

        .trend-indicator {
            font-size: 0.875rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }
        .trend-up {
            background-color: #dcfce7;
            color: #166534;
        }
        .trend-down {
            background-color: #fee2e2;
            color: #991b1b;
        }
        .trend-neutral {
            background-color: #f3f4f6;
            color: #374151;
        }
        .comparison-chart {
            height: 300px;
        }
        .projection-chart {
            height: 300px;
        }
        .variation-card {
            transition: all 0.3s ease;
        }
        .variation-card:hover {
            transform: translateY(-5px);
        }

        /* Estilos para el botón de modo oscuro */
        .theme-toggle {
            background: none;
            border: none;
            padding: 8px;
            cursor: pointer;
            font-size: 1.2rem;
            color: var(--text-color);
            transition: transform 0.2s ease;
        }

        .theme-toggle:hover {
            transform: scale(1.1);
        }

        [data-bs-theme="dark"] .theme-toggle .bi-moon-fill {
            display: none;
        }

        [data-bs-theme="dark"] .theme-toggle .bi-sun-fill {
            display: inline-block;
        }

        [data-bs-theme="light"] .theme-toggle .bi-moon-fill {
            display: inline-block;
        }

        [data-bs-theme="light"] .theme-toggle .bi-sun-fill {
            display: none;
        }

        /* Ajustes para el modo oscuro en los gráficos */
        [data-bs-theme="dark"] .trend-up {
            background-color: rgba(22, 101, 52, 0.2);
            color: #86efac;
        }

        [data-bs-theme="dark"] .trend-down {
            background-color: rgba(153, 27, 27, 0.2);
            color: #fca5a5;
        }

        [data-bs-theme="dark"] .trend-neutral {
            background-color: rgba(55, 65, 81, 0.2);
            color: #9ca3af;
        }
    </style>
</head>
<body>
    <!-- Navbar con botones de autenticación -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">Sistema de Registro de Consumo de Agua</a>
            <div class="d-flex">
                <button class="btn btn-outline-light me-2" data-bs-toggle="modal" data-bs-target="#loginModal">
                    Iniciar Sesión
                </button>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#registroModal">
                    Registrarse
                </button>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Tarjetas de estadísticas -->
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card stats-card">
                    <div class="stats-value" id="promedioBogota">-</div>
                    <div class="stats-label">Promedio Bogotá (m³/mes)</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card stats-card">
                    <div class="stats-value" id="promedioSoacha">-</div>
                    <div class="stats-label">Promedio Soacha (m³/mes)</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card stats-card">
                    <div class="stats-value" id="promedioGachancipa">-</div>
                    <div class="stats-label">Promedio Gachancipá (m³/mes)</div>
                </div>
            </div>
        </div>

        <!-- Variación Porcentual -->
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card variation-card">
                    <div class="card-body">
                        <h6 class="card-title">
                            <i class="bi bi-percent text-primary"></i>
                            Variación Mensual Bogotá
                        </h6>
                        <div class="d-flex align-items-center mt-3">
                            <div class="stats-value" id="variacionBogota">-</div>
                            <span class="ms-2" id="trendBogota"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card variation-card">
                    <div class="card-body">
                        <h6 class="card-title">
                            <i class="bi bi-percent text-primary"></i>
                            Variación Mensual Soacha
                        </h6>
                        <div class="d-flex align-items-center mt-3">
                            <div class="stats-value" id="variacionSoacha">-</div>
                            <span class="ms-2" id="trendSoacha"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card variation-card">
                    <div class="card-body">
                        <h6 class="card-title">
                            <i class="bi bi-percent text-primary"></i>
                            Variación Mensual Gachancipá
                        </h6>
                        <div class="d-flex align-items-center mt-3">
                            <div class="stats-value" id="variacionGachancipa">-</div>
                            <span class="ms-2" id="trendGachancipa"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Gráfico de Consumo -->
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-graph-up text-primary"></i>
                            Tendencia de Consumo
                        </h5>
                        <div class="chart-container">
                            <canvas id="consumoChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Mapa -->
            <div class="col-lg-4">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-geo-alt text-primary"></i>
                            Mapa de Sectores
                        </h5>
                        <div id="mapaConsumo"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Nuevos gráficos -->
        <div class="row mb-4">
            <!-- Gráfico de Barras Comparativo -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-bar-chart-fill text-primary"></i>
                            Comparativa Mensual
                        </h5>
                        <div class="comparison-chart">
                            <canvas id="comparativeChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Proyección -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-graph-up-arrow text-primary"></i>
                            Proyección Próximos 6 Meses
                        </h5>
                        <div class="projection-chart">
                            <canvas id="projectionChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tabla de Consumos -->
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="bi bi-table text-primary"></i>
                    Historial de Consumos
                </h5>
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Mes</th>
                                <th>Consumo Bogotá (m³/mes)</th>
                                <th>Consumo Soacha (m³/mes)</th>
                                <th>Consumo Gachancipá (m³/mes)</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (consumos && consumos.length > 0) { %>
                                <% consumos.forEach(consumo => { %>
                                    <tr>
                                        <td><%= consumo.Mes %></td>
                                        <td><%= consumo["Consumo Bogotá (m3-mes)"] %></td>
                                        <td><%= consumo["Consumo Soacha (m3-mes)"] %></td>
                                        <td><%= consumo["Consumo Gachancipá (m3-mes)"] %></td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="4" class="text-center">No hay datos de consumo disponibles</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Login -->
    <div class="modal fade" id="loginModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Iniciar Sesión</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="loginForm">
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" id="loginEmail" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Contraseña</label>
                            <input type="password" class="form-control" id="loginPassword" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Iniciar Sesión</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Registro -->
    <div class="modal fade" id="registroModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Registro de Usuario</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="registroForm">
                        <div class="mb-3">
                            <label class="form-label">Nombre</label>
                            <input type="text" class="form-control" id="nombre" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Apellido</label>
                            <input type="text" class="form-control" id="apellido" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Contraseña</label>
                            <input type="password" class="form-control" id="password" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Teléfono</label>
                            <input type="tel" class="form-control" id="telefono">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Dirección</label>
                            <input type="text" class="form-control mb-2" id="calle" placeholder="Calle">
                            <input type="text" class="form-control mb-2" id="ciudad" placeholder="Ciudad">
                            <input type="text" class="form-control" id="codigoPostal" placeholder="Código Postal">
                        </div>
                        <button type="submit" class="btn btn-primary">Registrarse</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/regression@2.0.1/dist/regression.min.js"></script>

    <script type="application/json" id="consumosData">
        <%- JSON.stringify(consumos) %>
    </script>

    <script>
        // Función para convertir string a número
        function parseConsumo(valor) {
            if (!valor) return 0;
            return parseFloat(valor.replace(',', '.')) || 0;
        }

        // Función para calcular promedio
        function calcularPromedio(arr) {
            return (arr.reduce((a, b) => a + b, 0) / arr.length).toFixed(2);
        }

        // Nueva función para calcular variación porcentual
        function calcularVariacion(actual, anterior) {
            if (!anterior) return 0;
            return ((actual - anterior) / anterior * 100).toFixed(2);
        }

        // Nueva función para crear indicador de tendencia
        function crearIndicadorTendencia(variacion) {
            const valor = parseFloat(variacion);
            if (valor > 0) {
                return `<span class="trend-indicator trend-up">
                    <i class="bi bi-arrow-up-right"></i>${Math.abs(valor)}%
                </span>`;
            } else if (valor < 0) {
                return `<span class="trend-indicator trend-down">
                    <i class="bi bi-arrow-down-right"></i>${Math.abs(valor)}%
                </span>`;
            }
            return `<span class="trend-indicator trend-neutral">
                <i class="bi bi-arrow-right"></i>0%
            </span>`;
        }

        // Nueva función para calcular proyección lineal
        function calcularProyeccion(datos, meses) {
            const points = datos.map((y, x) => [x, y]);
            const result = regression.linear(points);
            const proyeccion = [];
            
            for (let i = datos.length; i < datos.length + meses; i++) {
                proyeccion.push(result.predict(i)[1]);
            }
            
            return proyeccion;
        }

        const consumosData = JSON.parse(document.getElementById('consumosData').textContent);
        console.log('Datos disponibles:', consumosData);

        if (consumosData && consumosData.length > 0) {
            // Preparar datos
            const meses = consumosData.map(c => c.Mes || '');
            const consumoBogota = consumosData.map(c => parseConsumo(c["Consumo Bogotá (m3-mes)"]));
            const consumoSoacha = consumosData.map(c => parseConsumo(c["Consumo Soacha (m3-mes)"]));
            const consumoGachancipa = consumosData.map(c => parseConsumo(c["Consumo Gachancipá (m3-mes)"]));

            // Calcular variaciones
            const ultimoMesBogota = consumoBogota[consumoBogota.length - 1];
            const penultimoMesBogota = consumoBogota[consumoBogota.length - 2];
            const variacionBogota = calcularVariacion(ultimoMesBogota, penultimoMesBogota);

            // Actualizar promedios en las tarjetas superiores
            document.getElementById('promedioBogota').textContent = calcularPromedio(consumoBogota);
            document.getElementById('promedioSoacha').textContent = calcularPromedio(consumoSoacha);
            document.getElementById('promedioGachancipa').textContent = calcularPromedio(consumoGachancipa);

            const ultimoMesSoacha = consumoSoacha[consumoSoacha.length - 1];
            const penultimoMesSoacha = consumoSoacha[consumoSoacha.length - 2];
            const variacionSoacha = calcularVariacion(ultimoMesSoacha, penultimoMesSoacha);

            const ultimoMesGachancipa = consumoGachancipa[consumoGachancipa.length - 1];
            const penultimoMesGachancipa = consumoGachancipa[consumoGachancipa.length - 2];
            const variacionGachancipa = calcularVariacion(ultimoMesGachancipa, penultimoMesGachancipa);

            // Actualizar indicadores de variación
            document.getElementById('variacionBogota').textContent = `${variacionBogota}%`;
            document.getElementById('trendBogota').innerHTML = crearIndicadorTendencia(variacionBogota);
            
            document.getElementById('variacionSoacha').textContent = `${variacionSoacha}%`;
            document.getElementById('trendSoacha').innerHTML = crearIndicadorTendencia(variacionSoacha);
            
            document.getElementById('variacionGachancipa').textContent = `${variacionGachancipa}%`;
            document.getElementById('trendGachancipa').innerHTML = crearIndicadorTendencia(variacionGachancipa);

            // Calcular proyecciones
            const mesesProyeccion = 6;
            const proyeccionBogota = calcularProyeccion(consumoBogota, mesesProyeccion);
            const proyeccionSoacha = calcularProyeccion(consumoSoacha, mesesProyeccion);
            const proyeccionGachancipa = calcularProyeccion(consumoGachancipa, mesesProyeccion);

            // Generar meses futuros
            const ultimoMes = new Date(meses[meses.length - 1].split('-')[1] + '-01-20' + meses[meses.length - 1].split('-')[0]);
            const mesesFuturos = Array.from({length: mesesProyeccion}, (_, i) => {
                const fecha = new Date(ultimoMes);
                fecha.setMonth(fecha.getMonth() + i + 1);
                return `${fecha.toLocaleString('es', {month: 'short'})}-${fecha.getFullYear().toString().slice(-2)}`;
            });

            // Gráfico comparativo
            const ctxComparative = document.getElementById('comparativeChart').getContext('2d');
            new Chart(ctxComparative, {
                type: 'bar',
                data: {
                    labels: meses.slice(-6),
                    datasets: [
                        {
                            label: 'Bogotá',
                            data: consumoBogota.slice(-6),
                            backgroundColor: 'rgba(37, 99, 235, 0.7)',
                        },
                        {
                            label: 'Soacha',
                            data: consumoSoacha.slice(-6),
                            backgroundColor: 'rgba(219, 39, 119, 0.7)',
                        },
                        {
                            label: 'Gachancipá',
                            data: consumoGachancipa.slice(-6),
                            backgroundColor: 'rgba(124, 58, 237, 0.7)',
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });

            // Gráfico de proyección
            const ctxProjection = document.getElementById('projectionChart').getContext('2d');
            new Chart(ctxProjection, {
                type: 'line',
                data: {
                    labels: [...meses.slice(-6), ...mesesFuturos],
                    datasets: [
                        {
                            label: 'Bogotá',
                            data: [...consumoBogota.slice(-6), ...proyeccionBogota],
                            borderColor: '#2563eb',
                            segment: {
                                borderDash: ctx => ctx.p0.parsed.x >= consumoBogota.slice(-6).length - 1 ? [6, 6] : undefined,
                            }
                        },
                        {
                            label: 'Soacha',
                            data: [...consumoSoacha.slice(-6), ...proyeccionSoacha],
                            borderColor: '#db2777',
                            segment: {
                                borderDash: ctx => ctx.p0.parsed.x >= consumoSoacha.slice(-6).length - 1 ? [6, 6] : undefined,
                            }
                        },
                        {
                            label: 'Gachancipá',
                            data: [...consumoGachancipa.slice(-6), ...proyeccionGachancipa],
                            borderColor: '#7c3aed',
                            segment: {
                                borderDash: ctx => ctx.p0.parsed.x >= consumoGachancipa.slice(-6).length - 1 ? [6, 6] : undefined,
                            }
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const dataIndex = context.dataIndex;
                                    const datasetLength = consumoBogota.slice(-6).length;
                                    const isProjection = dataIndex >= datasetLength;
                                    return `${context.dataset.label}: ${context.parsed.y.toFixed(2)} m³/mes ${isProjection ? '(Proyección)' : ''}`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });

            // Gráfico principal de tendencia
            const ctxConsumo = document.getElementById('consumoChart').getContext('2d');
            new Chart(ctxConsumo, {
                type: 'line',
                data: {
                    labels: meses,
                    datasets: [
                        {
                            label: 'Bogotá',
                            data: consumoBogota,
                            borderColor: '#2563eb',
                            backgroundColor: 'rgba(37, 99, 235, 0.1)',
                            tension: 0.4,
                            fill: true
                        },
                        {
                            label: 'Soacha',
                            data: consumoSoacha,
                            borderColor: '#db2777',
                            backgroundColor: 'rgba(219, 39, 119, 0.1)',
                            tension: 0.4,
                            fill: true
                        },
                        {
                            label: 'Gachancipá',
                            data: consumoGachancipa,
                            borderColor: '#7c3aed',
                            backgroundColor: 'rgba(124, 58, 237, 0.1)',
                            tension: 0.4,
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                padding: 20,
                                font: {
                                    family: 'Inter',
                                    size: 12
                                },
                                usePointStyle: true
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            titleColor: '#1e293b',
                            bodyColor: '#1e293b',
                            borderColor: '#e2e8f0',
                            borderWidth: 1,
                            padding: 12,
                            callbacks: {
                                label: function(context) {
                                    return context.dataset.label + ': ' + context.parsed.y.toFixed(2) + ' m³/mes';
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            grid: {
                                color: 'rgba(226, 232, 240, 0.5)'
                            },
                            ticks: {
                                font: {
                                    family: 'Inter'
                                }
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                font: {
                                    family: 'Inter'
                                }
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        axis: 'x',
                        intersect: false
                    }
                }
            });

            // Inicializar el mapa
            const map = L.map('mapaConsumo').setView([4.6097, -74.0817], 9);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            // Agregar marcadores para las ciudades
            const ciudades = [
                {
                    nombre: 'Bogotá',
                    coords: [4.6097, -74.0817],
                    consumo: calcularPromedio(consumoBogota)
                },
                {
                    nombre: 'Soacha',
                    coords: [4.5789, -74.2121],
                    consumo: calcularPromedio(consumoSoacha)
                },
                {
                    nombre: 'Gachancipá',
                    coords: [4.9925, -73.8757],
                    consumo: calcularPromedio(consumoGachancipa)
                }
            ];

            ciudades.forEach(ciudad => {
                L.marker(ciudad.coords)
                    .bindPopup(`
                        <strong>${ciudad.nombre}</strong><br>
                        Consumo promedio: ${ciudad.consumo} m³/mes
                    `)
                    .addTo(map);
            });

            // Agregar polígonos para las áreas de servicio
            const estiloPoligono = {
                color: '#2563eb',
                weight: 2,
                opacity: 0.6,
                fillOpacity: 0.1
            };

            // Ejemplo de polígonos simplificados para las áreas de servicio
            const areaBogota = L.circle([4.6097, -74.0817], {
                ...estiloPoligono,
                radius: 15000
            }).addTo(map);

            const areaSoacha = L.circle([4.5789, -74.2121], {
                ...estiloPoligono,
                radius: 8000
            }).addTo(map);

            const areaGachancipa = L.circle([4.9925, -73.8757], {
                ...estiloPoligono,
                radius: 5000
            }).addTo(map);
        }

        // Función para manejar el modo oscuro
        function initTheme() {
            const themeToggle = document.getElementById('themeToggle');
            const html = document.documentElement;
            
            // Recuperar preferencia guardada
            const savedTheme = localStorage.getItem('theme') || 'light';
            html.setAttribute('data-bs-theme', savedTheme);

            themeToggle.addEventListener('click', () => {
                const currentTheme = html.getAttribute('data-bs-theme');
                const newTheme = currentTheme === 'light' ? 'dark' : 'light';
                
                html.setAttribute('data-bs-theme', newTheme);
                localStorage.setItem('theme', newTheme);
                
                // Actualizar estilos de los gráficos
                updateChartsTheme(newTheme);
            });
        }

        // Función para actualizar el tema de los gráficos
        function updateChartsTheme(theme) {
            Chart.defaults.color = theme === 'dark' ? '#e2e8f0' : '#1e293b';
            Chart.defaults.borderColor = theme === 'dark' ? '#334155' : '#e2e8f0';
            
            // Actualizar todos los gráficos
            Chart.instances.forEach(chart => {
                // Actualizar colores de la cuadrícula
                if (chart.options.scales?.y) {
                    chart.options.scales.y.grid.color = theme === 'dark' ? 'rgba(51, 65, 85, 0.5)' : 'rgba(226, 232, 240, 0.5)';
                }
                
                // Actualizar tooltips
                if (chart.options.plugins?.tooltip) {
                    chart.options.plugins.tooltip.backgroundColor = theme === 'dark' ? '#1e293b' : 'rgba(255, 255, 255, 0.9)';
                    chart.options.plugins.tooltip.titleColor = theme === 'dark' ? '#e2e8f0' : '#1e293b';
                    chart.options.plugins.tooltip.bodyColor = theme === 'dark' ? '#e2e8f0' : '#1e293b';
                    chart.options.plugins.tooltip.borderColor = theme === 'dark' ? '#334155' : '#e2e8f0';
                }
                
                chart.update();
            });
        }

        // Inicializar tema antes de crear los gráficos
        initTheme();

        // Función para mostrar mensajes
        function mostrarMensaje(mensaje, esError = false) {
            alert(mensaje); // Puedes mejorar esto con una librería de notificaciones
        }

        // Manejar registro
        document.getElementById('registroForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            try {
                const response = await fetch('/auth/registro', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        nombre: document.getElementById('nombre').value,
                        apellido: document.getElementById('apellido').value,
                        email: document.getElementById('email').value,
                        password: document.getElementById('password').value,
                        telefono: document.getElementById('telefono').value,
                        direccion: {
                            calle: document.getElementById('calle').value,
                            ciudad: document.getElementById('ciudad').value,
                            codigoPostal: document.getElementById('codigoPostal').value
                        }
                    })
                });

                const data = await response.json();
                if (response.ok) {
                    mostrarMensaje('Registro exitoso');
                    bootstrap.Modal.getInstance(document.getElementById('registroModal')).hide();
                    // Aquí puedes guardar el token y redirigir si es necesario
                    localStorage.setItem('token', data.token);
                } else {
                    mostrarMensaje(data.error || 'Error en el registro', true);
                }
            } catch (error) {
                mostrarMensaje('Error al conectar con el servidor', true);
            }
        });

        // Manejar login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            try {
                const response = await fetch('/auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        email: document.getElementById('loginEmail').value,
                        password: document.getElementById('loginPassword').value
                    })
                });

                const data = await response.json();
                if (response.ok) {
                    mostrarMensaje('Inicio de sesión exitoso');
                    bootstrap.Modal.getInstance(document.getElementById('loginModal')).hide();
                    // Aquí puedes guardar el token y redirigir si es necesario
                    localStorage.setItem('token', data.token);
                } else {
                    mostrarMensaje(data.error || 'Error en el inicio de sesión', true);
                }
            } catch (error) {
                mostrarMensaje('Error al conectar con el servidor', true);
            }
        });
    </script>
</body>
</html>